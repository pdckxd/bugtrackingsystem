//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Nairc.KPWPortal.Components {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SiteConfiguration")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SiteConfiguration : global::System.Data.DataSet {
        
        private GlobalDataTable tableGlobal;
        
        private TabDataTable tableTab;
        
        private ModuleDataTable tableModule;
        
        private SettingsDataTable tableSettings;
        
        private SettingDataTable tableSetting;
        
        private ModuleDefinitionDataTable tableModuleDefinition;
        
        private global::System.Data.DataRelation relationTab_Module;
        
        private global::System.Data.DataRelation relationModule_Settings;
        
        private global::System.Data.DataRelation relationSettings_Setting;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SiteConfiguration() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SiteConfiguration(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Global"] != null)) {
                    base.Tables.Add(new GlobalDataTable(ds.Tables["Global"]));
                }
                if ((ds.Tables["Tab"] != null)) {
                    base.Tables.Add(new TabDataTable(ds.Tables["Tab"]));
                }
                if ((ds.Tables["Module"] != null)) {
                    base.Tables.Add(new ModuleDataTable(ds.Tables["Module"]));
                }
                if ((ds.Tables["Settings"] != null)) {
                    base.Tables.Add(new SettingsDataTable(ds.Tables["Settings"]));
                }
                if ((ds.Tables["Setting"] != null)) {
                    base.Tables.Add(new SettingDataTable(ds.Tables["Setting"]));
                }
                if ((ds.Tables["ModuleDefinition"] != null)) {
                    base.Tables.Add(new ModuleDefinitionDataTable(ds.Tables["ModuleDefinition"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GlobalDataTable Global {
            get {
                return this.tableGlobal;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TabDataTable Tab {
            get {
                return this.tableTab;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ModuleDataTable Module {
            get {
                return this.tableModule;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SettingsDataTable Settings {
            get {
                return this.tableSettings;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SettingDataTable Setting {
            get {
                return this.tableSetting;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ModuleDefinitionDataTable ModuleDefinition {
            get {
                return this.tableModuleDefinition;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            SiteConfiguration cln = ((SiteConfiguration)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Global"] != null)) {
                    base.Tables.Add(new GlobalDataTable(ds.Tables["Global"]));
                }
                if ((ds.Tables["Tab"] != null)) {
                    base.Tables.Add(new TabDataTable(ds.Tables["Tab"]));
                }
                if ((ds.Tables["Module"] != null)) {
                    base.Tables.Add(new ModuleDataTable(ds.Tables["Module"]));
                }
                if ((ds.Tables["Settings"] != null)) {
                    base.Tables.Add(new SettingsDataTable(ds.Tables["Settings"]));
                }
                if ((ds.Tables["Setting"] != null)) {
                    base.Tables.Add(new SettingDataTable(ds.Tables["Setting"]));
                }
                if ((ds.Tables["ModuleDefinition"] != null)) {
                    base.Tables.Add(new ModuleDefinitionDataTable(ds.Tables["ModuleDefinition"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGlobal = ((GlobalDataTable)(base.Tables["Global"]));
            if ((initTable == true)) {
                if ((this.tableGlobal != null)) {
                    this.tableGlobal.InitVars();
                }
            }
            this.tableTab = ((TabDataTable)(base.Tables["Tab"]));
            if ((initTable == true)) {
                if ((this.tableTab != null)) {
                    this.tableTab.InitVars();
                }
            }
            this.tableModule = ((ModuleDataTable)(base.Tables["Module"]));
            if ((initTable == true)) {
                if ((this.tableModule != null)) {
                    this.tableModule.InitVars();
                }
            }
            this.tableSettings = ((SettingsDataTable)(base.Tables["Settings"]));
            if ((initTable == true)) {
                if ((this.tableSettings != null)) {
                    this.tableSettings.InitVars();
                }
            }
            this.tableSetting = ((SettingDataTable)(base.Tables["Setting"]));
            if ((initTable == true)) {
                if ((this.tableSetting != null)) {
                    this.tableSetting.InitVars();
                }
            }
            this.tableModuleDefinition = ((ModuleDefinitionDataTable)(base.Tables["ModuleDefinition"]));
            if ((initTable == true)) {
                if ((this.tableModuleDefinition != null)) {
                    this.tableModuleDefinition.InitVars();
                }
            }
            this.relationTab_Module = this.Relations["Tab_Module"];
            this.relationModule_Settings = this.Relations["Module_Settings"];
            this.relationSettings_Setting = this.Relations["Settings_Setting"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SiteConfiguration";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PortalCfg.xsd";
            this.EnforceConstraints = false;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGlobal = new GlobalDataTable();
            base.Tables.Add(this.tableGlobal);
            this.tableTab = new TabDataTable();
            base.Tables.Add(this.tableTab);
            this.tableModule = new ModuleDataTable();
            base.Tables.Add(this.tableModule);
            this.tableSettings = new SettingsDataTable();
            base.Tables.Add(this.tableSettings);
            this.tableSetting = new SettingDataTable();
            base.Tables.Add(this.tableSetting);
            this.tableModuleDefinition = new ModuleDefinitionDataTable();
            base.Tables.Add(this.tableModuleDefinition);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("Tab_Module", new global::System.Data.DataColumn[] {
                        this.tableTab.TabIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableModule.TabIdColumn});
            this.tableModule.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Module_Settings", new global::System.Data.DataColumn[] {
                        this.tableModule.ModuleIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSettings.ModuleIdColumn});
            this.tableSettings.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("Settings_Setting", new global::System.Data.DataColumn[] {
                        this.tableSettings.Settings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSetting.Settings_IdColumn});
            this.tableSetting.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationTab_Module = new global::System.Data.DataRelation("Tab_Module", new global::System.Data.DataColumn[] {
                        this.tableTab.TabIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableModule.TabIdColumn}, false);
            this.relationTab_Module.Nested = true;
            this.Relations.Add(this.relationTab_Module);
            this.relationModule_Settings = new global::System.Data.DataRelation("Module_Settings", new global::System.Data.DataColumn[] {
                        this.tableModule.ModuleIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSettings.ModuleIdColumn}, false);
            this.relationModule_Settings.Nested = true;
            this.Relations.Add(this.relationModule_Settings);
            this.relationSettings_Setting = new global::System.Data.DataRelation("Settings_Setting", new global::System.Data.DataColumn[] {
                        this.tableSettings.Settings_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSetting.Settings_IdColumn}, false);
            this.relationSettings_Setting.Nested = true;
            this.Relations.Add(this.relationSettings_Setting);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGlobal() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTab() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeModule() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSettings() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSetting() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeModuleDefinition() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SiteConfiguration ds = new SiteConfiguration();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GlobalRowChangeEventHandler(object sender, GlobalRowChangeEvent e);
        
        public delegate void TabRowChangeEventHandler(object sender, TabRowChangeEvent e);
        
        public delegate void ModuleRowChangeEventHandler(object sender, ModuleRowChangeEvent e);
        
        public delegate void SettingsRowChangeEventHandler(object sender, SettingsRowChangeEvent e);
        
        public delegate void SettingRowChangeEventHandler(object sender, SettingRowChangeEvent e);
        
        public delegate void ModuleDefinitionRowChangeEventHandler(object sender, ModuleDefinitionRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GlobalDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPortalId;
            
            private global::System.Data.DataColumn columnPortalName;
            
            private global::System.Data.DataColumn columnAlwaysShowEditButton;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalDataTable() {
                this.TableName = "Global";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GlobalDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GlobalDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortalIdColumn {
                get {
                    return this.columnPortalId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortalNameColumn {
                get {
                    return this.columnPortalName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AlwaysShowEditButtonColumn {
                get {
                    return this.columnAlwaysShowEditButton;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalRow this[int index] {
                get {
                    return ((GlobalRow)(this.Rows[index]));
                }
            }
            
            public event GlobalRowChangeEventHandler GlobalRowChanging;
            
            public event GlobalRowChangeEventHandler GlobalRowChanged;
            
            public event GlobalRowChangeEventHandler GlobalRowDeleting;
            
            public event GlobalRowChangeEventHandler GlobalRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGlobalRow(GlobalRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalRow AddGlobalRow(int PortalId, string PortalName, bool AlwaysShowEditButton) {
                GlobalRow rowGlobalRow = ((GlobalRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PortalId,
                        PortalName,
                        AlwaysShowEditButton};
                rowGlobalRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGlobalRow);
                return rowGlobalRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalRow FindByPortalId(int PortalId) {
                return ((GlobalRow)(this.Rows.Find(new object[] {
                            PortalId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GlobalDataTable cln = ((GlobalDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GlobalDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPortalId = base.Columns["PortalId"];
                this.columnPortalName = base.Columns["PortalName"];
                this.columnAlwaysShowEditButton = base.Columns["AlwaysShowEditButton"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPortalId = new global::System.Data.DataColumn("PortalId", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPortalId);
                this.columnPortalName = new global::System.Data.DataColumn("PortalName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPortalName);
                this.columnAlwaysShowEditButton = new global::System.Data.DataColumn("AlwaysShowEditButton", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAlwaysShowEditButton);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("GlobalKey", new global::System.Data.DataColumn[] {
                                this.columnPortalId}, true));
                this.columnPortalId.AllowDBNull = false;
                this.columnPortalId.Unique = true;
                this.columnPortalId.Namespace = "";
                this.columnPortalName.Namespace = "";
                this.columnAlwaysShowEditButton.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalRow NewGlobalRow() {
                return ((GlobalRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GlobalRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GlobalRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GlobalRowChanged != null)) {
                    this.GlobalRowChanged(this, new GlobalRowChangeEvent(((GlobalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GlobalRowChanging != null)) {
                    this.GlobalRowChanging(this, new GlobalRowChangeEvent(((GlobalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GlobalRowDeleted != null)) {
                    this.GlobalRowDeleted(this, new GlobalRowChangeEvent(((GlobalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GlobalRowDeleting != null)) {
                    this.GlobalRowDeleting(this, new GlobalRowChangeEvent(((GlobalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGlobalRow(GlobalRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SiteConfiguration ds = new SiteConfiguration();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GlobalDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TabDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTabId;
            
            private global::System.Data.DataColumn columnTabName;
            
            private global::System.Data.DataColumn columnAccessRoles;
            
            private global::System.Data.DataColumn columnTabOrder;
            
            private global::System.Data.DataColumn columnShowMobile;
            
            private global::System.Data.DataColumn columnMobileTabName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TabDataTable() {
                this.TableName = "Tab";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TabDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TabDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TabIdColumn {
                get {
                    return this.columnTabId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TabNameColumn {
                get {
                    return this.columnTabName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccessRolesColumn {
                get {
                    return this.columnAccessRoles;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TabOrderColumn {
                get {
                    return this.columnTabOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShowMobileColumn {
                get {
                    return this.columnShowMobile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MobileTabNameColumn {
                get {
                    return this.columnMobileTabName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TabRow this[int index] {
                get {
                    return ((TabRow)(this.Rows[index]));
                }
            }
            
            public event TabRowChangeEventHandler TabRowChanging;
            
            public event TabRowChangeEventHandler TabRowChanged;
            
            public event TabRowChangeEventHandler TabRowDeleting;
            
            public event TabRowChangeEventHandler TabRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTabRow(TabRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TabRow AddTabRow(int TabId, string TabName, string AccessRoles, int TabOrder, bool ShowMobile, string MobileTabName) {
                TabRow rowTabRow = ((TabRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TabId,
                        TabName,
                        AccessRoles,
                        TabOrder,
                        ShowMobile,
                        MobileTabName};
                rowTabRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTabRow);
                return rowTabRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TabRow FindByTabId(int TabId) {
                return ((TabRow)(this.Rows.Find(new object[] {
                            TabId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TabDataTable cln = ((TabDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TabDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTabId = base.Columns["TabId"];
                this.columnTabName = base.Columns["TabName"];
                this.columnAccessRoles = base.Columns["AccessRoles"];
                this.columnTabOrder = base.Columns["TabOrder"];
                this.columnShowMobile = base.Columns["ShowMobile"];
                this.columnMobileTabName = base.Columns["MobileTabName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTabId = new global::System.Data.DataColumn("TabId", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTabId);
                this.columnTabName = new global::System.Data.DataColumn("TabName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTabName);
                this.columnAccessRoles = new global::System.Data.DataColumn("AccessRoles", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAccessRoles);
                this.columnTabOrder = new global::System.Data.DataColumn("TabOrder", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTabOrder);
                this.columnShowMobile = new global::System.Data.DataColumn("ShowMobile", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnShowMobile);
                this.columnMobileTabName = new global::System.Data.DataColumn("MobileTabName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMobileTabName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("TabKey", new global::System.Data.DataColumn[] {
                                this.columnTabId}, true));
                this.columnTabId.AllowDBNull = false;
                this.columnTabId.Unique = true;
                this.columnTabId.Namespace = "";
                this.columnTabName.Namespace = "";
                this.columnAccessRoles.Namespace = "";
                this.columnTabOrder.Namespace = "";
                this.columnShowMobile.Namespace = "";
                this.columnMobileTabName.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TabRow NewTabRow() {
                return ((TabRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TabRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TabRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TabRowChanged != null)) {
                    this.TabRowChanged(this, new TabRowChangeEvent(((TabRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TabRowChanging != null)) {
                    this.TabRowChanging(this, new TabRowChangeEvent(((TabRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TabRowDeleted != null)) {
                    this.TabRowDeleted(this, new TabRowChangeEvent(((TabRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TabRowDeleting != null)) {
                    this.TabRowDeleting(this, new TabRowChangeEvent(((TabRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTabRow(TabRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SiteConfiguration ds = new SiteConfiguration();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TabDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ModuleDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnModuleId;
            
            private global::System.Data.DataColumn columnModuleTitle;
            
            private global::System.Data.DataColumn columnEditRoles;
            
            private global::System.Data.DataColumn columnModuleDefId;
            
            private global::System.Data.DataColumn columnPaneName;
            
            private global::System.Data.DataColumn columnCacheTimeout;
            
            private global::System.Data.DataColumn columnModuleOrder;
            
            private global::System.Data.DataColumn columnShowMobile;
            
            private global::System.Data.DataColumn columnTabId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleDataTable() {
                this.TableName = "Module";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModuleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ModuleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIdColumn {
                get {
                    return this.columnModuleId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleTitleColumn {
                get {
                    return this.columnModuleTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EditRolesColumn {
                get {
                    return this.columnEditRoles;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleDefIdColumn {
                get {
                    return this.columnModuleDefId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaneNameColumn {
                get {
                    return this.columnPaneName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CacheTimeoutColumn {
                get {
                    return this.columnCacheTimeout;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleOrderColumn {
                get {
                    return this.columnModuleOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShowMobileColumn {
                get {
                    return this.columnShowMobile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TabIdColumn {
                get {
                    return this.columnTabId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleRow this[int index] {
                get {
                    return ((ModuleRow)(this.Rows[index]));
                }
            }
            
            public event ModuleRowChangeEventHandler ModuleRowChanging;
            
            public event ModuleRowChangeEventHandler ModuleRowChanged;
            
            public event ModuleRowChangeEventHandler ModuleRowDeleting;
            
            public event ModuleRowChangeEventHandler ModuleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddModuleRow(ModuleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleRow AddModuleRow(int ModuleId, string ModuleTitle, string EditRoles, int ModuleDefId, string PaneName, int CacheTimeout, int ModuleOrder, bool ShowMobile, TabRow parentTabRowByTab_Module) {
                ModuleRow rowModuleRow = ((ModuleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ModuleId,
                        ModuleTitle,
                        EditRoles,
                        ModuleDefId,
                        PaneName,
                        CacheTimeout,
                        ModuleOrder,
                        ShowMobile,
                        null};
                if ((parentTabRowByTab_Module != null)) {
                    columnValuesArray[8] = parentTabRowByTab_Module[0];
                }
                rowModuleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowModuleRow);
                return rowModuleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleRow FindByModuleId(int ModuleId) {
                return ((ModuleRow)(this.Rows.Find(new object[] {
                            ModuleId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ModuleDataTable cln = ((ModuleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ModuleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnModuleId = base.Columns["ModuleId"];
                this.columnModuleTitle = base.Columns["ModuleTitle"];
                this.columnEditRoles = base.Columns["EditRoles"];
                this.columnModuleDefId = base.Columns["ModuleDefId"];
                this.columnPaneName = base.Columns["PaneName"];
                this.columnCacheTimeout = base.Columns["CacheTimeout"];
                this.columnModuleOrder = base.Columns["ModuleOrder"];
                this.columnShowMobile = base.Columns["ShowMobile"];
                this.columnTabId = base.Columns["TabId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnModuleId = new global::System.Data.DataColumn("ModuleId", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModuleId);
                this.columnModuleTitle = new global::System.Data.DataColumn("ModuleTitle", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModuleTitle);
                this.columnEditRoles = new global::System.Data.DataColumn("EditRoles", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEditRoles);
                this.columnModuleDefId = new global::System.Data.DataColumn("ModuleDefId", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModuleDefId);
                this.columnPaneName = new global::System.Data.DataColumn("PaneName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPaneName);
                this.columnCacheTimeout = new global::System.Data.DataColumn("CacheTimeout", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCacheTimeout);
                this.columnModuleOrder = new global::System.Data.DataColumn("ModuleOrder", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModuleOrder);
                this.columnShowMobile = new global::System.Data.DataColumn("ShowMobile", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnShowMobile);
                this.columnTabId = new global::System.Data.DataColumn("TabId", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTabId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ModuleKey", new global::System.Data.DataColumn[] {
                                this.columnModuleId}, true));
                this.columnModuleId.AllowDBNull = false;
                this.columnModuleId.Unique = true;
                this.columnModuleId.Namespace = "";
                this.columnModuleTitle.Namespace = "";
                this.columnEditRoles.Namespace = "";
                this.columnModuleDefId.Namespace = "";
                this.columnPaneName.Namespace = "";
                this.columnCacheTimeout.Namespace = "";
                this.columnModuleOrder.Namespace = "";
                this.columnShowMobile.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleRow NewModuleRow() {
                return ((ModuleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ModuleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ModuleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ModuleRowChanged != null)) {
                    this.ModuleRowChanged(this, new ModuleRowChangeEvent(((ModuleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ModuleRowChanging != null)) {
                    this.ModuleRowChanging(this, new ModuleRowChangeEvent(((ModuleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ModuleRowDeleted != null)) {
                    this.ModuleRowDeleted(this, new ModuleRowChangeEvent(((ModuleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ModuleRowDeleting != null)) {
                    this.ModuleRowDeleting(this, new ModuleRowChangeEvent(((ModuleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveModuleRow(ModuleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SiteConfiguration ds = new SiteConfiguration();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ModuleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SettingsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSettings_Id;
            
            private global::System.Data.DataColumn columnModuleId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingsDataTable() {
                this.TableName = "Settings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SettingsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SettingsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Settings_IdColumn {
                get {
                    return this.columnSettings_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleIdColumn {
                get {
                    return this.columnModuleId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingsRow this[int index] {
                get {
                    return ((SettingsRow)(this.Rows[index]));
                }
            }
            
            public event SettingsRowChangeEventHandler SettingsRowChanging;
            
            public event SettingsRowChangeEventHandler SettingsRowChanged;
            
            public event SettingsRowChangeEventHandler SettingsRowDeleting;
            
            public event SettingsRowChangeEventHandler SettingsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSettingsRow(SettingsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingsRow AddSettingsRow(ModuleRow parentModuleRowByModule_Settings) {
                SettingsRow rowSettingsRow = ((SettingsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentModuleRowByModule_Settings != null)) {
                    columnValuesArray[1] = parentModuleRowByModule_Settings[0];
                }
                rowSettingsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSettingsRow);
                return rowSettingsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SettingsDataTable cln = ((SettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SettingsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSettings_Id = base.Columns["Settings_Id"];
                this.columnModuleId = base.Columns["ModuleId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSettings_Id = new global::System.Data.DataColumn("Settings_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSettings_Id);
                this.columnModuleId = new global::System.Data.DataColumn("ModuleId", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnModuleId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSettings_Id}, true));
                this.columnSettings_Id.AutoIncrement = true;
                this.columnSettings_Id.AllowDBNull = false;
                this.columnSettings_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingsRow NewSettingsRow() {
                return ((SettingsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SettingsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SettingsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SettingsRowChanged != null)) {
                    this.SettingsRowChanged(this, new SettingsRowChangeEvent(((SettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SettingsRowChanging != null)) {
                    this.SettingsRowChanging(this, new SettingsRowChangeEvent(((SettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SettingsRowDeleted != null)) {
                    this.SettingsRowDeleted(this, new SettingsRowChangeEvent(((SettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SettingsRowDeleting != null)) {
                    this.SettingsRowDeleting(this, new SettingsRowChangeEvent(((SettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSettingsRow(SettingsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SiteConfiguration ds = new SiteConfiguration();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SettingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SettingDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnSetting_Text;
            
            private global::System.Data.DataColumn columnSettings_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingDataTable() {
                this.TableName = "Setting";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SettingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SettingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Setting_TextColumn {
                get {
                    return this.columnSetting_Text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Settings_IdColumn {
                get {
                    return this.columnSettings_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow this[int index] {
                get {
                    return ((SettingRow)(this.Rows[index]));
                }
            }
            
            public event SettingRowChangeEventHandler SettingRowChanging;
            
            public event SettingRowChangeEventHandler SettingRowChanged;
            
            public event SettingRowChangeEventHandler SettingRowDeleting;
            
            public event SettingRowChangeEventHandler SettingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSettingRow(SettingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow AddSettingRow(string Name, string Setting_Text, SettingsRow parentSettingsRowBySettings_Setting) {
                SettingRow rowSettingRow = ((SettingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        Setting_Text,
                        null};
                if ((parentSettingsRowBySettings_Setting != null)) {
                    columnValuesArray[2] = parentSettingsRowBySettings_Setting[0];
                }
                rowSettingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSettingRow);
                return rowSettingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SettingDataTable cln = ((SettingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SettingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnSetting_Text = base.Columns["Setting_Text"];
                this.columnSettings_Id = base.Columns["Settings_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnSetting_Text = new global::System.Data.DataColumn("Setting_Text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnSetting_Text);
                this.columnSettings_Id = new global::System.Data.DataColumn("Settings_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSettings_Id);
                this.columnName.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow NewSettingRow() {
                return ((SettingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SettingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SettingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SettingRowChanged != null)) {
                    this.SettingRowChanged(this, new SettingRowChangeEvent(((SettingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SettingRowChanging != null)) {
                    this.SettingRowChanging(this, new SettingRowChangeEvent(((SettingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SettingRowDeleted != null)) {
                    this.SettingRowDeleted(this, new SettingRowChangeEvent(((SettingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SettingRowDeleting != null)) {
                    this.SettingRowDeleting(this, new SettingRowChangeEvent(((SettingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSettingRow(SettingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SiteConfiguration ds = new SiteConfiguration();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SettingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ModuleDefinitionDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFriendlyName;
            
            private global::System.Data.DataColumn columnMobileSourceFile;
            
            private global::System.Data.DataColumn columnDesktopSourceFile;
            
            private global::System.Data.DataColumn columnModuleDefId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleDefinitionDataTable() {
                this.TableName = "ModuleDefinition";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModuleDefinitionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ModuleDefinitionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FriendlyNameColumn {
                get {
                    return this.columnFriendlyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MobileSourceFileColumn {
                get {
                    return this.columnMobileSourceFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DesktopSourceFileColumn {
                get {
                    return this.columnDesktopSourceFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleDefIdColumn {
                get {
                    return this.columnModuleDefId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleDefinitionRow this[int index] {
                get {
                    return ((ModuleDefinitionRow)(this.Rows[index]));
                }
            }
            
            public event ModuleDefinitionRowChangeEventHandler ModuleDefinitionRowChanging;
            
            public event ModuleDefinitionRowChangeEventHandler ModuleDefinitionRowChanged;
            
            public event ModuleDefinitionRowChangeEventHandler ModuleDefinitionRowDeleting;
            
            public event ModuleDefinitionRowChangeEventHandler ModuleDefinitionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddModuleDefinitionRow(ModuleDefinitionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleDefinitionRow AddModuleDefinitionRow(string FriendlyName, string MobileSourceFile, string DesktopSourceFile, int ModuleDefId) {
                ModuleDefinitionRow rowModuleDefinitionRow = ((ModuleDefinitionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FriendlyName,
                        MobileSourceFile,
                        DesktopSourceFile,
                        ModuleDefId};
                rowModuleDefinitionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowModuleDefinitionRow);
                return rowModuleDefinitionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleDefinitionRow FindByModuleDefId(int ModuleDefId) {
                return ((ModuleDefinitionRow)(this.Rows.Find(new object[] {
                            ModuleDefId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ModuleDefinitionDataTable cln = ((ModuleDefinitionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ModuleDefinitionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFriendlyName = base.Columns["FriendlyName"];
                this.columnMobileSourceFile = base.Columns["MobileSourceFile"];
                this.columnDesktopSourceFile = base.Columns["DesktopSourceFile"];
                this.columnModuleDefId = base.Columns["ModuleDefId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFriendlyName = new global::System.Data.DataColumn("FriendlyName", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFriendlyName);
                this.columnMobileSourceFile = new global::System.Data.DataColumn("MobileSourceFile", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMobileSourceFile);
                this.columnDesktopSourceFile = new global::System.Data.DataColumn("DesktopSourceFile", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDesktopSourceFile);
                this.columnModuleDefId = new global::System.Data.DataColumn("ModuleDefId", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnModuleDefId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ModDefKey", new global::System.Data.DataColumn[] {
                                this.columnModuleDefId}, true));
                this.columnFriendlyName.Namespace = "";
                this.columnMobileSourceFile.Namespace = "";
                this.columnDesktopSourceFile.Namespace = "";
                this.columnModuleDefId.AllowDBNull = false;
                this.columnModuleDefId.Unique = true;
                this.columnModuleDefId.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleDefinitionRow NewModuleDefinitionRow() {
                return ((ModuleDefinitionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ModuleDefinitionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ModuleDefinitionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ModuleDefinitionRowChanged != null)) {
                    this.ModuleDefinitionRowChanged(this, new ModuleDefinitionRowChangeEvent(((ModuleDefinitionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ModuleDefinitionRowChanging != null)) {
                    this.ModuleDefinitionRowChanging(this, new ModuleDefinitionRowChangeEvent(((ModuleDefinitionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ModuleDefinitionRowDeleted != null)) {
                    this.ModuleDefinitionRowDeleted(this, new ModuleDefinitionRowChangeEvent(((ModuleDefinitionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ModuleDefinitionRowDeleting != null)) {
                    this.ModuleDefinitionRowDeleting(this, new ModuleDefinitionRowChangeEvent(((ModuleDefinitionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveModuleDefinitionRow(ModuleDefinitionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SiteConfiguration ds = new SiteConfiguration();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ModuleDefinitionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GlobalRow : global::System.Data.DataRow {
            
            private GlobalDataTable tableGlobal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GlobalRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGlobal = ((GlobalDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PortalId {
                get {
                    return ((int)(this[this.tableGlobal.PortalIdColumn]));
                }
                set {
                    this[this.tableGlobal.PortalIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortalName {
                get {
                    try {
                        return ((string)(this[this.tableGlobal.PortalNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PortalName\' in table \'Global\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGlobal.PortalNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AlwaysShowEditButton {
                get {
                    try {
                        return ((bool)(this[this.tableGlobal.AlwaysShowEditButtonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AlwaysShowEditButton\' in table \'Global\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGlobal.AlwaysShowEditButtonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortalNameNull() {
                return this.IsNull(this.tableGlobal.PortalNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortalNameNull() {
                this[this.tableGlobal.PortalNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAlwaysShowEditButtonNull() {
                return this.IsNull(this.tableGlobal.AlwaysShowEditButtonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAlwaysShowEditButtonNull() {
                this[this.tableGlobal.AlwaysShowEditButtonColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TabRow : global::System.Data.DataRow {
            
            private TabDataTable tableTab;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TabRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTab = ((TabDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TabId {
                get {
                    return ((int)(this[this.tableTab.TabIdColumn]));
                }
                set {
                    this[this.tableTab.TabIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TabName {
                get {
                    try {
                        return ((string)(this[this.tableTab.TabNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TabName\' in table \'Tab\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTab.TabNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccessRoles {
                get {
                    try {
                        return ((string)(this[this.tableTab.AccessRolesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccessRoles\' in table \'Tab\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTab.AccessRolesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TabOrder {
                get {
                    try {
                        return ((int)(this[this.tableTab.TabOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TabOrder\' in table \'Tab\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTab.TabOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ShowMobile {
                get {
                    try {
                        return ((bool)(this[this.tableTab.ShowMobileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShowMobile\' in table \'Tab\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTab.ShowMobileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MobileTabName {
                get {
                    try {
                        return ((string)(this[this.tableTab.MobileTabNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MobileTabName\' in table \'Tab\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTab.MobileTabNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTabNameNull() {
                return this.IsNull(this.tableTab.TabNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTabNameNull() {
                this[this.tableTab.TabNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccessRolesNull() {
                return this.IsNull(this.tableTab.AccessRolesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccessRolesNull() {
                this[this.tableTab.AccessRolesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTabOrderNull() {
                return this.IsNull(this.tableTab.TabOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTabOrderNull() {
                this[this.tableTab.TabOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShowMobileNull() {
                return this.IsNull(this.tableTab.ShowMobileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShowMobileNull() {
                this[this.tableTab.ShowMobileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMobileTabNameNull() {
                return this.IsNull(this.tableTab.MobileTabNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMobileTabNameNull() {
                this[this.tableTab.MobileTabNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleRow[] GetModuleRows() {
                if ((this.Table.ChildRelations["Tab_Module"] == null)) {
                    return new ModuleRow[0];
                }
                else {
                    return ((ModuleRow[])(base.GetChildRows(this.Table.ChildRelations["Tab_Module"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ModuleRow : global::System.Data.DataRow {
            
            private ModuleDataTable tableModule;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModuleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableModule = ((ModuleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ModuleId {
                get {
                    return ((int)(this[this.tableModule.ModuleIdColumn]));
                }
                set {
                    this[this.tableModule.ModuleIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModuleTitle {
                get {
                    try {
                        return ((string)(this[this.tableModule.ModuleTitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleTitle\' in table \'Module\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModule.ModuleTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EditRoles {
                get {
                    try {
                        return ((string)(this[this.tableModule.EditRolesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EditRoles\' in table \'Module\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModule.EditRolesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ModuleDefId {
                get {
                    try {
                        return ((int)(this[this.tableModule.ModuleDefIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleDefId\' in table \'Module\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModule.ModuleDefIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaneName {
                get {
                    try {
                        return ((string)(this[this.tableModule.PaneNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaneName\' in table \'Module\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModule.PaneNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CacheTimeout {
                get {
                    try {
                        return ((int)(this[this.tableModule.CacheTimeoutColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CacheTimeout\' in table \'Module\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModule.CacheTimeoutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ModuleOrder {
                get {
                    try {
                        return ((int)(this[this.tableModule.ModuleOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleOrder\' in table \'Module\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModule.ModuleOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ShowMobile {
                get {
                    try {
                        return ((bool)(this[this.tableModule.ShowMobileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShowMobile\' in table \'Module\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModule.ShowMobileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TabId {
                get {
                    try {
                        return ((int)(this[this.tableModule.TabIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TabId\' in table \'Module\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModule.TabIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TabRow TabRow {
                get {
                    return ((TabRow)(this.GetParentRow(this.Table.ParentRelations["Tab_Module"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Tab_Module"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleTitleNull() {
                return this.IsNull(this.tableModule.ModuleTitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleTitleNull() {
                this[this.tableModule.ModuleTitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEditRolesNull() {
                return this.IsNull(this.tableModule.EditRolesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEditRolesNull() {
                this[this.tableModule.EditRolesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleDefIdNull() {
                return this.IsNull(this.tableModule.ModuleDefIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleDefIdNull() {
                this[this.tableModule.ModuleDefIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaneNameNull() {
                return this.IsNull(this.tableModule.PaneNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaneNameNull() {
                this[this.tableModule.PaneNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCacheTimeoutNull() {
                return this.IsNull(this.tableModule.CacheTimeoutColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCacheTimeoutNull() {
                this[this.tableModule.CacheTimeoutColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleOrderNull() {
                return this.IsNull(this.tableModule.ModuleOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleOrderNull() {
                this[this.tableModule.ModuleOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShowMobileNull() {
                return this.IsNull(this.tableModule.ShowMobileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShowMobileNull() {
                this[this.tableModule.ShowMobileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTabIdNull() {
                return this.IsNull(this.tableModule.TabIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTabIdNull() {
                this[this.tableModule.TabIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingsRow[] GetSettingsRows() {
                if ((this.Table.ChildRelations["Module_Settings"] == null)) {
                    return new SettingsRow[0];
                }
                else {
                    return ((SettingsRow[])(base.GetChildRows(this.Table.ChildRelations["Module_Settings"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SettingsRow : global::System.Data.DataRow {
            
            private SettingsDataTable tableSettings;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SettingsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSettings = ((SettingsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Settings_Id {
                get {
                    return ((int)(this[this.tableSettings.Settings_IdColumn]));
                }
                set {
                    this[this.tableSettings.Settings_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ModuleId {
                get {
                    try {
                        return ((int)(this[this.tableSettings.ModuleIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModuleId\' in table \'Settings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSettings.ModuleIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleRow ModuleRow {
                get {
                    return ((ModuleRow)(this.GetParentRow(this.Table.ParentRelations["Module_Settings"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Module_Settings"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModuleIdNull() {
                return this.IsNull(this.tableSettings.ModuleIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModuleIdNull() {
                this[this.tableSettings.ModuleIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow[] GetSettingRows() {
                if ((this.Table.ChildRelations["Settings_Setting"] == null)) {
                    return new SettingRow[0];
                }
                else {
                    return ((SettingRow[])(base.GetChildRows(this.Table.ChildRelations["Settings_Setting"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SettingRow : global::System.Data.DataRow {
            
            private SettingDataTable tableSetting;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SettingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSetting = ((SettingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableSetting.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Setting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSetting.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Setting_Text {
                get {
                    try {
                        return ((string)(this[this.tableSetting.Setting_TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Setting_Text\' in table \'Setting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSetting.Setting_TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Settings_Id {
                get {
                    try {
                        return ((int)(this[this.tableSetting.Settings_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Settings_Id\' in table \'Setting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSetting.Settings_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingsRow SettingsRow {
                get {
                    return ((SettingsRow)(this.GetParentRow(this.Table.ParentRelations["Settings_Setting"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Settings_Setting"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableSetting.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableSetting.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetting_TextNull() {
                return this.IsNull(this.tableSetting.Setting_TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetting_TextNull() {
                this[this.tableSetting.Setting_TextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSettings_IdNull() {
                return this.IsNull(this.tableSetting.Settings_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSettings_IdNull() {
                this[this.tableSetting.Settings_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ModuleDefinitionRow : global::System.Data.DataRow {
            
            private ModuleDefinitionDataTable tableModuleDefinition;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModuleDefinitionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableModuleDefinition = ((ModuleDefinitionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FriendlyName {
                get {
                    try {
                        return ((string)(this[this.tableModuleDefinition.FriendlyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FriendlyName\' in table \'ModuleDefinition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModuleDefinition.FriendlyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MobileSourceFile {
                get {
                    try {
                        return ((string)(this[this.tableModuleDefinition.MobileSourceFileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MobileSourceFile\' in table \'ModuleDefinition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModuleDefinition.MobileSourceFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DesktopSourceFile {
                get {
                    try {
                        return ((string)(this[this.tableModuleDefinition.DesktopSourceFileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DesktopSourceFile\' in table \'ModuleDefinition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModuleDefinition.DesktopSourceFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ModuleDefId {
                get {
                    return ((int)(this[this.tableModuleDefinition.ModuleDefIdColumn]));
                }
                set {
                    this[this.tableModuleDefinition.ModuleDefIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFriendlyNameNull() {
                return this.IsNull(this.tableModuleDefinition.FriendlyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFriendlyNameNull() {
                this[this.tableModuleDefinition.FriendlyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMobileSourceFileNull() {
                return this.IsNull(this.tableModuleDefinition.MobileSourceFileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMobileSourceFileNull() {
                this[this.tableModuleDefinition.MobileSourceFileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDesktopSourceFileNull() {
                return this.IsNull(this.tableModuleDefinition.DesktopSourceFileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDesktopSourceFileNull() {
                this[this.tableModuleDefinition.DesktopSourceFileColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GlobalRowChangeEvent : global::System.EventArgs {
            
            private GlobalRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalRowChangeEvent(GlobalRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GlobalRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TabRowChangeEvent : global::System.EventArgs {
            
            private TabRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TabRowChangeEvent(TabRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TabRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ModuleRowChangeEvent : global::System.EventArgs {
            
            private ModuleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleRowChangeEvent(ModuleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SettingsRowChangeEvent : global::System.EventArgs {
            
            private SettingsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingsRowChangeEvent(SettingsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SettingRowChangeEvent : global::System.EventArgs {
            
            private SettingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRowChangeEvent(SettingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ModuleDefinitionRowChangeEvent : global::System.EventArgs {
            
            private ModuleDefinitionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleDefinitionRowChangeEvent(ModuleDefinitionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModuleDefinitionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591